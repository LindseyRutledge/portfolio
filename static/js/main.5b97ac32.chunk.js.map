{"version":3,"sources":["components/PortfolioPage/PortfolioPage.tsx","serviceWorker.ts","index.tsx"],"names":["PortfolioPage","useState","theme","setTheme","usedLocationHash","setUsedLocationHash","contentRef","useRef","iconsRef","sectionsRef","sections","id","label","icon","updateMenu","currentContentRef","current","contentHeight","offsetHeight","scrollTopPosition","scrollTop","scrollBottomPosition","isScrolledToBottom","scrollHeight","window","location","hash","console","log","setSelectedMenuItemByHashLocation","setSelectedMenuItem","length","setSelectedMenuItemByScrollPosition","throttledScroll","_","useEffect","addEventListener","removeEventListener","index","forEach","section","i","classList","remove","add","replace","sectionIndex","findIndex","sectionVisibleHeight","s","sectionHeight","sectionTopPosition","offsetTop","secitonBottomPosition","visibleHeightPercentage","Math","max","min","indexOf","debouncedAddEventListener","className","classNames","onClick","title","map","key","href","ref","undefined","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b97ac32.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { FunctionComponent, useEffect, useRef, ReactNode, useState } from 'react';\r\nimport './PortfolioPage.scss';\r\nimport {\r\n    RiEmotionLine,\r\n    RiLightbulbLine,\r\n    RiBriefcase3Line,\r\n    RiGithubLine,\r\n    RiLinksLine,\r\n    RiMoonLine,\r\n    RiSunLine\r\n} from 'react-icons/ri';\r\nimport * as _ from 'lodash';\r\nimport classNames from 'classnames';\r\n\r\nexport interface PortfolioSection {\r\n    id: string;\r\n    label: string;\r\n    icon: ReactNode;\r\n}\r\n\r\nexport const PortfolioPage: FunctionComponent = () => {\r\n    const [theme, setTheme] = useState<string>('dark-theme');\r\n    const [usedLocationHash, setUsedLocationHash] = useState<boolean>(false);\r\n\r\n    const contentRef = useRef<HTMLDivElement>(null);\r\n    const iconsRef = useRef<HTMLDivElement[]>([]);\r\n    const sectionsRef = useRef<HTMLDivElement[]>([]);\r\n\r\n    const sections: PortfolioSection[] = [\r\n        { id: 'about', label: 'About', icon: <RiEmotionLine /> },\r\n        { id: 'skills', label: 'Skills', icon: <RiLightbulbLine /> },\r\n        { id: 'work-history', label: 'Work History', icon: <RiBriefcase3Line /> },\r\n        { id: 'projects', label: 'Projects', icon: <RiGithubLine /> },\r\n        { id: 'links', label: 'Links', icon: <RiLinksLine /> },\r\n    ];\r\n\r\n    const updateMenu = () => {\r\n        const currentContentRef: HTMLDivElement | null = contentRef.current;\r\n\r\n        if (currentContentRef) {\r\n            const contentHeight: number = currentContentRef.offsetHeight;\r\n            const scrollTopPosition: number = currentContentRef.scrollTop;\r\n            const scrollBottomPosition: number = scrollTopPosition + contentHeight;\r\n            const scrollHeight: number = currentContentRef.scrollHeight;\r\n\r\n            const isScrolledToBottom: boolean = scrollTopPosition + contentHeight === scrollHeight;\r\n\r\n            if (window.location.hash && !usedLocationHash) {\r\n                console.log('hash')\r\n                setSelectedMenuItemByHashLocation();\r\n                setUsedLocationHash(true);\r\n            } else if (isScrolledToBottom) {\r\n                console.log('bottom')\r\n                setSelectedMenuItem(sections.length - 1);\r\n            } else {\r\n                console.log('position')\r\n                setSelectedMenuItemByScrollPosition(scrollTopPosition, scrollBottomPosition);\r\n            }\r\n        }\r\n    };\r\n\r\n    const throttledScroll = _.throttle(updateMenu, 100);\r\n\r\n    const setupScrollEventListener = () => {\r\n        contentRef.current?.addEventListener('scroll', throttledScroll);\r\n\r\n        return () => {\r\n            contentRef.current?.removeEventListener('scroll', throttledScroll);\r\n        };\r\n    };\r\n\r\n    useEffect(updateMenu, []);\r\n\r\n    useEffect(setupScrollEventListener, [usedLocationHash]);\r\n\r\n    const setSelectedMenuItem = (index: number) => {\r\n        sections.forEach((section: PortfolioSection, i: number) => {\r\n            iconsRef.current[i]?.classList.remove('selected');\r\n        });\r\n        iconsRef.current[index]?.classList.add('selected');\r\n    };\r\n\r\n    const setSelectedMenuItemByHashLocation = () => {\r\n        const location = window.location.hash.replace('#', '');\r\n\r\n        const sectionIndex = sections.findIndex((section: PortfolioSection) => {\r\n            return section.id === location\r\n        });\r\n\r\n        setSelectedMenuItem(sectionIndex);\r\n    };\r\n\r\n    const setSelectedMenuItemByScrollPosition = (scrollTopPosition: number, scrollBottomPosition: number) => {\r\n        const currentContentRef: HTMLDivElement | null = contentRef.current;\r\n\r\n        if (currentContentRef) {\r\n            const sectionVisibleHeight: number[] = [];\r\n\r\n            sections.forEach((s: PortfolioSection, i: number) => {\r\n                const section: HTMLDivElement = sectionsRef.current[i];\r\n\r\n                if (section) {\r\n                    const sectionHeight: number = section.offsetHeight;\r\n\r\n                    const sectionTopPosition = section.offsetTop - currentContentRef.offsetTop;\r\n                    const secitonBottomPosition = sectionTopPosition + sectionHeight;\r\n\r\n                    const visibleHeight: number = Math.max(Math.min(scrollBottomPosition, secitonBottomPosition) - Math.max(scrollTopPosition, sectionTopPosition), 0);\r\n                    const visibleHeightPercentage: number = visibleHeight / sectionHeight;\r\n\r\n                    sectionVisibleHeight[i] = visibleHeightPercentage;\r\n                }\r\n            });\r\n\r\n            setSelectedMenuItem(sectionVisibleHeight.indexOf(Math.max(...sectionVisibleHeight)));\r\n        }\r\n    };\r\n\r\n    const debouncedAddEventListener = _.debounce(() => {\r\n        contentRef.current?.addEventListener('scroll', throttledScroll);\r\n    }, 1000);\r\n\r\n    return (\r\n        <div className={classNames('PortfolioPage', theme)}>\r\n            <div className='PortfolioPage-header'>\r\n                <div className='PortfolioPage-title'>\r\n                    <div className='PortfolioPage-name'>Lindsey</div>\r\n                    <div className='PortfolioPage-name'>Rutledge</div>\r\n                    <div\r\n                        className='PortfolioPage-themeToggle'\r\n                        onClick={() => setTheme(theme === 'dark-theme' ? 'light-theme' : 'dark-theme')}\r\n                        title='Change theme'\r\n                    >\r\n                        {theme === 'dark-theme' ? <RiMoonLine /> : <RiSunLine />}\r\n                    </div>\r\n                </div>\r\n                <div className='PortfolioPage-header-icons'>\r\n                    {sections.map((section: PortfolioSection, i: number) => {\r\n                        return (\r\n                            <a\r\n                                key={section.id}\r\n                                href={`#${section.id}`}\r\n                                onClick={() => {\r\n                                    contentRef.current?.removeEventListener('scroll', throttledScroll);\r\n                                    debouncedAddEventListener();\r\n                                    setSelectedMenuItem(i);\r\n                                }}\r\n                            >\r\n                                <div\r\n                                    className='PortfolioPage-header-iconGroup'\r\n                                    ref={icon => icon ? iconsRef.current[i] = icon : undefined}\r\n                                >\r\n                                    <div className={classNames('PortfolioPage-header-icon', `${section.id}-icon`)}>\r\n                                        {section.icon}\r\n                                    </div>\r\n                                    <div className={classNames('PortfolioPage-header-iconLabel', `${section.id}-label`)}>\r\n                                        {section.label}\r\n                                    </div>\r\n                                </div>\r\n                            </a>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className='PortfolioPage-content' ref={contentRef}>\r\n                {sections.map((section: PortfolioSection, i: number) => {\r\n                    return (\r\n                        <div\r\n                            key={section.id}\r\n                            id={section.id}\r\n                            className='PortfolioPage-section'\r\n                            ref={section => section ? sectionsRef.current[i] = section : undefined}\r\n                        >\r\n                            <div className='PortfolioPage-heading'>{section.label}</div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PortfolioPage } from './components/PortfolioPage/PortfolioPage';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PortfolioPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}