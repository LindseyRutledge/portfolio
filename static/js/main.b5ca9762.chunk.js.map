{"version":3,"sources":["components/PortfolioPage/PortfolioPage.tsx","serviceWorker.ts","index.tsx"],"names":["PortfolioPage","contentRef","useRef","iconsRef","useEffect","updateMenu","throttledScroll","_","currentContentRef","current","addEventListener","removeEventListener","currentIconsRef","contentPos","offsetTop","contentHeight","offsetHeight","scrollPosTop","scrollTop","scrollPosBottom","clientHeight","scrollHeight","headings","getElementsByClassName","selectedSet","headingsArray","entries","index","heading","id","headingPos","matchingIcon","querySelector","classList","remove","length","add","className","ref","href","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAYaA,EAAmC,WAC5C,IAAMC,EAAaC,iBAAuB,MACpCC,EAAWD,iBAAuB,MAExCE,qBAAU,WACNC,IAEA,IAAMC,EAAkBC,WAAWF,EAAY,IACzCG,EAA2CP,EAAWQ,QAM5D,OAJID,GACAA,EAAkBE,iBAAiB,SAAUJ,GAG1C,WACCE,GACAA,EAAkBG,oBAAoB,SAAUL,MAGzD,IAEH,IAAMD,EAAa,WACf,IAAMG,EAA2CP,EAAWQ,QACtDG,EAAyCT,EAASM,QAExD,GAAID,GAAqBI,EAAiB,CACtC,IADsC,EAChCC,EAAaL,EAAkBM,UAC/BC,EAAgBP,EAAkBQ,aAElCC,EAAeT,EAAkBU,UACjCC,EAAkBF,EAAeT,EAAkBY,aACnDC,EAAeb,EAAkBa,aAEjCC,EAAiCd,EAAkBe,uBAAuB,yBAE5EC,GAAc,EAEZC,EAAkB,YAAOH,GAZO,cAcPG,EAAcC,WAdP,IActC,2BAAwD,CAAC,IAAD,yBAA5CC,EAA4C,KAArCC,EAAqC,KAC9CC,EAAKD,EAAQC,GACbC,EAAaF,EAAQd,UAAYD,EAEjCkB,EAAyCnB,EAAgBoB,cAAhB,WAAkCH,EAAlC,UAE3CE,IACAA,EAAaE,UAAUC,OAAO,YAE1BjB,EAAeF,IAAkBM,IACjCG,GAAc,EAEVG,IAAUF,EAAcU,OAAS,GACjCJ,EAAaE,UAAUG,IAAI,cAI9BZ,GAAeM,GAAcb,GAAgBa,GAAcX,IAC5DY,EAAaE,UAAUG,IAAI,YAC3BZ,GAAc,KAjCY,iCAwC9C,OACI,uBAAKa,UAAU,iBACX,uBAAKA,UAAU,wBACX,uBAAKA,UAAU,uBAAf,oBACA,uBAAKA,UAAU,6BAA6BC,IAAKnC,GAC7C,qBAAG0B,GAAG,aAAaU,KAAK,SAASC,MAAM,SACnC,gBAAC,IAAD,OAEJ,qBAAGX,GAAG,cAAcU,KAAK,UAAUC,MAAM,UACrC,gBAAC,IAAD,OAEJ,qBAAGX,GAAG,oBAAoBU,KAAK,gBAAgBC,MAAM,gBACjD,gBAAC,IAAD,OAEJ,qBAAGX,GAAG,gBAAgBU,KAAK,YAAYC,MAAM,YACzC,gBAAC,IAAD,OAEJ,qBAAGX,GAAG,aAAaU,KAAK,SAASC,MAAM,SACnC,gBAAC,IAAD,SAIZ,uBAAKH,UAAU,wBAAwBC,IAAKrC,GACxC,uBAAKoC,UAAU,yBACX,uBAAKR,GAAG,QAAQQ,UAAU,yBAA1B,UAEJ,uBAAKA,UAAU,yBACX,uBAAKR,GAAG,SAASQ,UAAU,yBAA3B,WAEJ,uBAAKA,UAAU,yBACX,uBAAKR,GAAG,eAAeQ,UAAU,yBAAjC,iBAEJ,uBAAKA,UAAU,yBACX,uBAAKR,GAAG,WAAWQ,UAAU,yBAA7B,aAEJ,uBAAKA,UAAU,yBACX,uBAAKR,GAAG,QAAQQ,UAAU,yBAA1B,aCrGAI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5ca9762.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { FunctionComponent, useEffect, useRef } from 'react';\r\nimport './PortfolioPage.scss';\r\nimport {\r\n    RiEmotionLine,\r\n    RiLightbulbLine,\r\n    RiBriefcase3Line,\r\n    RiGithubLine,\r\n    RiLinksLine\r\n} from 'react-icons/ri';\r\nimport * as _ from 'lodash';\r\n\r\nexport const PortfolioPage: FunctionComponent = () => {\r\n    const contentRef = useRef<HTMLDivElement>(null);\r\n    const iconsRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        updateMenu();\r\n\r\n        const throttledScroll = _.throttle(updateMenu, 50);\r\n        const currentContentRef: HTMLDivElement | null = contentRef.current;\r\n\r\n        if (currentContentRef) {\r\n            currentContentRef.addEventListener('scroll', throttledScroll);\r\n        }\r\n\r\n        return () => {\r\n            if (currentContentRef) {\r\n                currentContentRef.removeEventListener('scroll', throttledScroll);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const updateMenu = () => {\r\n        const currentContentRef: HTMLDivElement | null = contentRef.current;\r\n        const currentIconsRef: HTMLDivElement | null = iconsRef.current;\r\n\r\n        if (currentContentRef && currentIconsRef) {\r\n            const contentPos = currentContentRef.offsetTop;\r\n            const contentHeight = currentContentRef.offsetHeight;\r\n\r\n            const scrollPosTop = currentContentRef.scrollTop;\r\n            const scrollPosBottom = scrollPosTop + currentContentRef.clientHeight;\r\n            const scrollHeight = currentContentRef.scrollHeight;\r\n\r\n            const headings: HTMLCollection | any = currentContentRef.getElementsByClassName('PortfolioPage-heading');\r\n\r\n            let selectedSet = false;\r\n\r\n            const headingsArray: any = [...headings];\r\n\r\n            for (const [index, heading] of headingsArray.entries()) {\r\n                const id = heading.id;\r\n                const headingPos = heading.offsetTop - contentPos;\r\n\r\n                const matchingIcon: HTMLAnchorElement | null = currentIconsRef.querySelector(`#${id}-icon`);\r\n\r\n                if (matchingIcon) {\r\n                    matchingIcon.classList.remove('selected');\r\n\r\n                    if (scrollPosTop + contentHeight === scrollHeight) {\r\n                        selectedSet = true;\r\n\r\n                        if (index === headingsArray.length - 1) {\r\n                            matchingIcon.classList.add('selected');\r\n                        }\r\n                    }\r\n\r\n                    if (!selectedSet && headingPos >= scrollPosTop && headingPos <= scrollPosBottom) {\r\n                        matchingIcon.classList.add('selected');\r\n                        selectedSet = true;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='PortfolioPage'>\r\n            <div className='PortfolioPage-header'>\r\n                <div className='PortfolioPage-title'>Lindsey Rutledge</div>\r\n                <div className='PortfolioPage-header-icons' ref={iconsRef}>\r\n                    <a id='about-icon' href='#about' title='About'>\r\n                        <RiEmotionLine />\r\n                    </a>\r\n                    <a id='skills-icon' href='#skills' title='Skills'>\r\n                        <RiLightbulbLine />\r\n                    </a>\r\n                    <a id='work-history-icon' href='#work-history' title='Work History'>\r\n                        <RiBriefcase3Line />\r\n                    </a>\r\n                    <a id='projects-icon' href='#projects' title='Projects'>\r\n                        <RiGithubLine />\r\n                    </a>\r\n                    <a id='links-icon' href='#links' title='Links'>\r\n                        <RiLinksLine />\r\n                    </a>\r\n                </div>\r\n            </div>\r\n            <div className='PortfolioPage-content' ref={contentRef}>\r\n                <div className='PortfolioPage-section'>\r\n                    <div id='about' className=\"PortfolioPage-heading\">About</div>\r\n                </div>\r\n                <div className='PortfolioPage-section'>\r\n                    <div id='skills' className=\"PortfolioPage-heading\">Skills</div>\r\n                </div>\r\n                <div className='PortfolioPage-section'>\r\n                    <div id='work-history' className=\"PortfolioPage-heading\">Work History</div>\r\n                </div>\r\n                <div className='PortfolioPage-section'>\r\n                    <div id='projects' className=\"PortfolioPage-heading\">Projects</div>\r\n                </div>\r\n                <div className='PortfolioPage-section'>\r\n                    <div id='links' className=\"PortfolioPage-heading\">Links</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PortfolioPage } from './components/PortfolioPage/PortfolioPage';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PortfolioPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}